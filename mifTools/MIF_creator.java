package mifTools;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.ByteBuffer;


public class MIF_creator
{	
	private FileInputStream bin;
	private BufferedWriter mif;
	private long lengthInWords;
	
	public MIF_creator() throws IOException
	{
		this("output.mif", "out.bin");
	}

	public MIF_creator(String out, String in) throws IOException
	{
		bin = new FileInputStream(in);
		mif = new BufferedWriter(new FileWriter(out,false));
		lengthInWords = new File(in).length()/4;
	}
	
	public void convertAndClose() throws IOException
	{
		int operation = 0, address = 0;
		
		byte[] b = new byte[4];
		
		int bytesRead = 0;
		
		double addr_width = Math.log10(lengthInWords)/Math.log10(2);
		addr_width = Math.ceil(addr_width);
		
		int addr_depth = (int) Math.pow(2, addr_width);//find address depth
		
		/**Creating header and necessary declarations **/
		mif.write("--This MIF was generated by the MIF_creator from a MIPS binary file\n");
		mif.write("--Copyright Brandon Pollack 2014\n\n");
		mif.write("WIDTH=32;\n");
		mif.write("DEPTH=" + Integer.toString(addr_depth) + ";\n\n");
		mif.write("ADDRESS_RADIX=HEX;\n");
		mif.write("DATA_RADIX=HEX;\n\n");
		mif.write("CONTENT BEGIN\n");
		
		//begin writing data from bin
		do
		{
			bytesRead = bin.read(b);
			
			operation = ByteBuffer.wrap(b).getInt();
			
			if(bytesRead >= 0)
			{
				mif.write("\t" + Integer.toHexString(address) + "\t:\t" + Integer.toHexString(operation) + ";\n");
				++address;
			}
			else //end of file, initialize rest of memory to 0
			{				
				mif.write("\t[" + Integer.toHexString(address) + ".." + Integer.toHexString(addr_depth) + "]\t00000000;\n");
			}
		}while(bytesRead >= 0);
		
		mif.write("END;");
		
		bin.close();
		mif.close();
	}
}
